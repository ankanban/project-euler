# Even Fibonacci numbers
# Problem 2
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#
# Sum of fibonacci sequence.
# Sigma_j=1...n_(F_j_) = F_n+2_-1 
# Generating fibonacci numbers:
# http://www.geeksforgeeks.org/program-for-nth-fibonacci-number/
#
def fibonacci_sum(n):
	even_sum = 0
	f_j_minus_1 = 0
	f_j = 1
	f_j_plus_1 = 0
	if n == 0:
		return even_sum
	print(f_j_minus_1)
	print(f_j)
	while True:
		even_sum += f_j if (f_j % 2 == 0) else 0
		f_j_plus_1 = f_j_minus_1 + f_j
		print(f_j_plus_1)
		f_j_minus_1 = f_j
		f_j = f_j_plus_1
		if (f_j >= n):
			print("Final f_j = " + str(f_j))
			break
	return even_sum

#def fibonacci_sum(n):
#	return fibonacci_at(n+2) - 1

if __name__=="__main__":
	print(fibonacci_sum(4000000))